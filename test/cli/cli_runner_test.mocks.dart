// Mocks generated by Mockito 5.4.6 from annotations
// in missing_plugin_exception_detective/test/cli/cli_runner_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:missing_plugin_exception_detective/src/core/detective.dart'
    as _i3;
import 'package:missing_plugin_exception_detective/src/core/diagnostic_result.dart'
    as _i2;
import 'package:missing_plugin_exception_detective/src/core/plugin_issue.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDiagnosticResult_0 extends _i1.SmartFake
    implements _i2.DiagnosticResult {
  _FakeDiagnosticResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MissingPluginExceptionDetective].
///
/// See the documentation for Mockito's code generation for more information.
class MockMissingPluginExceptionDetective extends _i1.Mock
    implements _i3.MissingPluginExceptionDetective {
  MockMissingPluginExceptionDetective() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DiagnosticResult> diagnose({
    String? projectPath,
    bool? includeResolutions = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#diagnose, [], {
              #projectPath: projectPath,
              #includeResolutions: includeResolutions,
            }),
            returnValue: _i4.Future<_i2.DiagnosticResult>.value(
              _FakeDiagnosticResult_0(
                this,
                Invocation.method(#diagnose, [], {
                  #projectPath: projectPath,
                  #includeResolutions: includeResolutions,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.DiagnosticResult>);

  @override
  _i4.Stream<_i5.PluginIssue> monitorRuntime() =>
      (super.noSuchMethod(
            Invocation.method(#monitorRuntime, []),
            returnValue: _i4.Stream<_i5.PluginIssue>.empty(),
          )
          as _i4.Stream<_i5.PluginIssue>);
}
